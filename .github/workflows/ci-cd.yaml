name: CI/CD Pipeline to EKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 843170960179
  ECR_REPOSITORY: devops-alon-app
  EKS_CLUSTER_NAME: devops-alon-eks
  IMAGE_TAG: ${{ github.sha }}
  BUILD_CONTEXT: ./app
  DOCKERFILE_PATH: ./app/Dockerfile
  HELM_CHART_PATH: ./helm

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: 1) Checkout
        uses: actions/checkout@v4

      - name: 2) Configure AWS credentials (secrets)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 3) Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 4) Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 5) Build & Push image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 6) Install Helm
        uses: azure/setup-helm@v4

      - name: 7) Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ env.EKS_CLUSTER_NAME }}" \
            --region "${{ env.AWS_REGION }}"

      - name: 7.1) Ensure this CI identity has EKS admin (idempotent)
        run: |
          set -e
          PRINCIPAL_ARN=$(aws sts get-caller-identity --query Arn --output text)
          echo "CI principal: $PRINCIPAL_ARN"
          aws eks create-access-entry \
            --cluster-name "${{ env.EKS_CLUSTER_NAME }}" \
            --principal-arn "$PRINCIPAL_ARN" \
            --type STANDARD \
            --region "${{ env.AWS_REGION }}" || true
          aws eks associate-access-policy \
            --cluster-name "${{ env.EKS_CLUSTER_NAME }}" \
            --principal-arn "$PRINCIPAL_ARN" \
            --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy \
            --access-scope type=cluster \
            --region "${{ env.AWS_REGION }}" || true
          aws eks describe-access-entry \
            --cluster-name "${{ env.EKS_CLUSTER_NAME }}" \
            --principal-arn "$PRINCIPAL_ARN" \
            --region "${{ env.AWS_REGION }}" --query accessEntry
          kubectl get nodes || true

      - name: 8) Helm upgrade/install (public LB)
        run: |
          helm upgrade --install alon-app "${{ env.HELM_CHART_PATH }}" \
            --set image.repository="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" \
            --set image.tag="${{ env.IMAGE_TAG }}" \
            --set service.type=LoadBalancer

      - name: 9) Print status & external address
        run: |
          kubectl rollout status deploy/alon-app --timeout=180s || true
          echo "Service External Address:"
          kubectl get svc alon-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}{"\n"}' || true
          kubectl get pods,svc -o wide


name: CI/CD Pipeline to EKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 843170960179
  ECR_REPOSITORY: devops-alon-app
  EKS_CLUSTER_NAME: devops-alon           # <<< עדכן אם צריך
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_CONTEXT: app                      # <<< אם Dockerfile בשורש: "."
  DOCKERFILE: app/Dockerfile               # <<< אם בשורש: "Dockerfile"
  HELM_CHART_PATH: helm/devops-alon        # <<< נתיב הצ'ארט המדויק

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 1) Checkout
        uses: actions/checkout@v4

      - name: 2) Configure AWS credentials (using secrets)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 3) Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 4) Set up Docker Buildx (optional but safe)
        uses: docker/setup-buildx-action@v3

      - name: 5) Build & Push image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKER_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 6) Install Helm
        uses: azure/setup-helm@v4

      - name: 7) Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ env.EKS_CLUSTER_NAME }}" \
            --region "${{ env.AWS_REGION }}"

      - name: 8) Helm upgrade/install (public LB)
        run: |
          helm upgrade --install alon-app "${{ env.HELM_CHART_PATH }}" \
            --set image.repository="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" \
            --set image.tag="${{ env.IMAGE_TAG }}" \
            --set service.type=LoadBalancer

      - name: 9) Wait & print external URL
        run: |
          kubectl rollout status deploy/alon-app --timeout=180s || true
          echo "Service External Address:"
          kubectl get svc alon-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}{"\n"}' || true
          kubectl get pods,svc -o wide

